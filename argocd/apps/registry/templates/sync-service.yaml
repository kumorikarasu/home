---
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry-sync-script
data:
  sync.py: |
    #!/usr/bin/env python3
    import json
    import sys
    import subprocess
    import os
    import time
    from datetime import datetime, timedelta
    
    def sync_all_images():
        try:
            # Discover all repositories dynamically instead of using hardcoded list
            catalog_cmd = [
                'skopeo', 'list-tags',
                'docker://registry-external-service:7834/_catalog',
                '--cert-dir=/certs'
            ]
            
            # Get repository list from catalog
            catalog_result = subprocess.run(['curl', '-s', '--cert', '/certs/client.cert', '--key', '/certs/client.key', '--cacert', '/certs/ca.crt', 'https://registry-external-service:7834/v2/_catalog'], capture_output=True, text=True)
            
            if catalog_result.returncode == 0:
                try:
                    catalog_data = json.loads(catalog_result.stdout)
                    repositories = catalog_data.get('repositories', [])
                    print(f"Found {len(repositories)} repositories to sync")
                except json.JSONDecodeError:
                    print("Failed to parse catalog response, falling back to known repositories")
                    repositories = ['bayoudb/bayoudb', 'bayoudb/frontend2', 'bayoudb/grafana-plugin', 'bayoudb/migration', 'bayoudb/event-generator']
            else:
                print(f"Failed to get catalog: {catalog_result.stderr}")
                repositories = ['bayoudb/bayoudb', 'bayoudb/frontend2', 'bayoudb/grafana-plugin', 'bayoudb/migration', 'bayoudb/event-generator']
            
            for repo in repositories:
                print(f"Syncing repository: {repo}")
                
                list_cmd = [
                    'skopeo', 'list-tags',
                    f'docker://registry-external-service:7834/{repo}',
                    '--cert-dir=/certs'
                ]
                
                list_result = subprocess.run(list_cmd, capture_output=True, text=True)
                
                if list_result.returncode == 0:
                    tags_data = json.loads(list_result.stdout)
                    tags = tags_data.get('Tags', [])
                    
                    for tag in tags:
                        print(f"Syncing {repo}:{tag}")
                        
                        inspect_cmd = [
                            'skopeo', 'inspect',
                            f'docker://registry-internal-service:5000/{repo}:{tag}',
                            '--tls-verify=false'
                        ]
                        
                        inspect_result = subprocess.run(inspect_cmd, capture_output=True, text=True)
                        
                        if inspect_result.returncode == 0:
                            print(f"Tag {repo}:{tag} already exists in internal registry, skipping")
                            continue
                        
                        copy_cmd = [
                            'skopeo', 'copy',
                            f'docker://registry-external-service:7834/{repo}:{tag}',
                            f'docker://registry-internal-service:5000/{repo}:{tag}',
                            '--src-cert-dir=/certs',
                            '--dest-tls-verify=false'
                        ]
                        
                        copy_result = subprocess.run(copy_cmd, capture_output=True, text=True)
                        
                        if copy_result.returncode == 0:
                            print(f"Successfully synced {repo}:{tag} to internal registry")
                        else:
                            print(f"Failed to sync {repo}:{tag}: {copy_result.stderr}")
                            
                else:
                    print(f"Failed to list tags for {repo}: {list_result.stderr}")
            
            return True
            
        except Exception as e:
            print(f"Error syncing images: {e}")
            return False
    
    def cleanup_old_external_images():
        try:
            cutoff_date = datetime.now() - timedelta(days=7)
            
            # Get repository list from catalog for cleanup too
            catalog_result = subprocess.run(['curl', '-s', '--cert', '/certs/client.cert', '--key', '/certs/client.key', '--cacert', '/certs/ca.crt', 'https://registry-external-service:7834/v2/_catalog'], capture_output=True, text=True)
            
            if catalog_result.returncode == 0:
                try:
                    catalog_data = json.loads(catalog_result.stdout)
                    repositories = catalog_data.get('repositories', [])
                    print(f"Found {len(repositories)} repositories for cleanup")
                except json.JSONDecodeError:
                    print("Failed to parse catalog response for cleanup, falling back to known repositories")
                    repositories = ['bayoudb/bayoudb', 'bayoudb/frontend2', 'bayoudb/grafana-plugin', 'bayoudb/migration', 'bayoudb/event-generator']
            else:
                print(f"Failed to get catalog for cleanup: {catalog_result.stderr}")
                repositories = ['bayoudb/bayoudb', 'bayoudb/frontend2', 'bayoudb/grafana-plugin', 'bayoudb/migration', 'bayoudb/event-generator']
            
            for repo in repositories:
                print(f"Cleaning up old images in repository: {repo}")
                
                list_cmd = [
                    'skopeo', 'list-tags',
                    f'docker://registry-external-service:7834/{repo}',
                    '--cert-dir=/certs'
                ]
                
                list_result = subprocess.run(list_cmd, capture_output=True, text=True)
                
                if list_result.returncode == 0:
                    tags_data = json.loads(list_result.stdout)
                    tags = tags_data.get('Tags', [])
                    
                    for tag in tags:
                        inspect_cmd = [
                            'skopeo', 'inspect',
                            f'docker://registry-external-service:7834/{repo}:{tag}',
                            '--cert-dir=/certs'
                        ]
                        
                        inspect_result = subprocess.run(inspect_cmd, capture_output=True, text=True)
                        
                        if inspect_result.returncode == 0:
                            image_info = json.loads(inspect_result.stdout)
                            created_str = image_info.get('Created', '')
                            
                            if created_str:
                                try:
                                    created_date = datetime.fromisoformat(created_str.replace('Z', '+00:00')).replace(tzinfo=None)
                                    
                                    if created_date < cutoff_date:
                                        print(f"Deleting old image {repo}:{tag} (created: {created_date})")
                                        
                                        delete_cmd = [
                                            'skopeo', 'delete',
                                            f'docker://registry-external-service:7834/{repo}:{tag}',
                                            '--cert-dir=/certs'
                                        ]
                                        
                                        delete_result = subprocess.run(delete_cmd, capture_output=True, text=True)
                                        
                                        if delete_result.returncode == 0:
                                            print(f"Successfully deleted old image {repo}:{tag}")
                                        else:
                                            print(f"Failed to delete {repo}:{tag}: {delete_result.stderr}")
                                    else:
                                        print(f"Keeping recent image {repo}:{tag} (created: {created_date})")
                                        
                                except ValueError as e:
                                    print(f"Could not parse creation date for {repo}:{tag}: {e}")
                        
            return True
            
        except Exception as e:
            print(f"Error cleaning up old images: {e}")
            return False
    
    def sync_image(payload_str):
        try:
            payload = json.loads(payload_str)
            print(f"Received webhook payload, syncing all images...")
            
            sync_success = sync_all_images()
            cleanup_success = cleanup_old_external_images()
            
            return sync_success and cleanup_success
            
        except Exception as e:
            print(f"Error processing webhook: {e}")
            return False
    
    if __name__ == "__main__":
        if len(sys.argv) > 1:
            success = sync_image(sys.argv[1])
            sys.exit(0 if success else 1)
        else:
            print("No payload provided")
            sys.exit(1)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-sync-deployment
  labels:
    app: registry-sync
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry-sync
  template:
    metadata:
      labels:
        app: registry-sync
    spec:
      volumes:
      - name: sync-script
        configMap:
          name: registry-sync-script
          defaultMode: 0755
      - name: client-certs
        secret:
          secretName: registry-external-certs
      containers:
      - name: sync
        image: quay.io/skopeo/stable:latest
        ports:
        - containerPort: 8080
        volumeMounts:
        - name: sync-script
          mountPath: /scripts
        - name: client-certs
          mountPath: /certs
          readOnly: true
        command:
        - python3
        - -c
        - |
          import json
          import subprocess
          from http.server import HTTPServer, BaseHTTPRequestHandler
          
          class SyncHandler(BaseHTTPRequestHandler):
              def do_POST(self):
                  if self.path == '/sync':
                      try:
                          content_length = int(self.headers.get('Content-Length', 0))
                          payload = self.rfile.read(content_length).decode('utf-8') if content_length > 0 else '{}'
                          
                          print(f"Received webhook payload: {payload}")
                          
                          # Execute sync script
                          result = subprocess.run(['python3', '/scripts/sync.py', payload], 
                                                capture_output=True, text=True)
                          
                          print(f"Sync script output: {result.stdout}")
                          if result.stderr:
                              print(f"Sync script errors: {result.stderr}")
                          
                          try:
                              if result.returncode == 0:
                                  self.send_response(200)
                                  self.send_header('Content-Type', 'text/plain')
                                  self.end_headers()
                                  self.wfile.write(b'Sync completed')
                              else:
                                  self.send_response(500)
                                  self.send_header('Content-Type', 'text/plain')
                                  self.end_headers()
                                  self.wfile.write(f'Sync failed: {result.stderr}'.encode())
                          except (BrokenPipeError, ConnectionResetError):
                              print("Client disconnected during response")
                              
                      except Exception as e:
                          print(f"Handler exception: {e}")
                          try:
                              self.send_response(500)
                              self.send_header('Content-Type', 'text/plain')
                              self.end_headers()
                              self.wfile.write(f'Error: {str(e)}'.encode())
                          except (BrokenPipeError, ConnectionResetError):
                              print("Client disconnected during error response")
                  else:
                      try:
                          self.send_response(404)
                          self.send_header('Content-Type', 'text/plain')
                          self.end_headers()
                      except (BrokenPipeError, ConnectionResetError):
                          print("Client disconnected during 404 response")
              
              def log_message(self, format, *args):
                  print(f"{self.address_string()} - {format%args}")
          
          server = HTTPServer(('0.0.0.0', 8080), SyncHandler)
          print("Registry sync service listening on port 8080")
          server.serve_forever()

---
apiVersion: v1
kind: Service
metadata:
  name: registry-sync-service
spec:
  selector:
    app: registry-sync
  ports:
    - port: 8080
      targetPort: 8080