---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "{{ .Release.Name }}-deployment"
  labels:
    app: "{{ .Release.Name }}-sdwu"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: "{{ .Release.Name }}-sdwu"
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: "{{ .Release.Name }}-sdwu"
    spec:
      volumes:
      - name: appdata
        persistentVolumeClaim:
          claimName: appdata-pvc
      - name: "{{ .Release.Name }}-models"
        persistentVolumeClaim:
          claimName: "{{ .Release.Name }}-models-pvc"
      - name: "{{ .Release.Name }}-config"
        configMap:
          name: "{{ .Release.Name }}-config"
      containers:
      - name: sdwu 
        image: registry.home.ryougi.ca/sdwu
        resources:
          limits:
            nvidia.com/gpu: 1
          requests:
            nvidia.com/gpu: 1
        ports:
        - containerPort: 7860
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: UMASK
          value: "000"
        - name: COMMANDLINE_ARGS
          value: "--listen --enable-insecure-extension-access --api"
        volumeMounts:
        - mountPath: "/stable-diffusion-webui/models"
          name: "{{ .Release.Name }}-models"
        - mountPath: "/stable-diffusion-webui/outputs"
          name: appdata
          subPath: sdwu/outputs

      
---
apiVersion: v1
kind: Service
metadata:
  name: "{{ .Release.Name }}-service"
spec:
  selector:
    app: "{{ .Release.Name }}-sdwu"
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 7860

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: "{{ .Release.Name }}-models-pvc"
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 64Gi

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: "{{ .Release.Name }}-models-pv"
spec:
  capacity:
    storage: 64Gi
  accessModes:
  - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /data/volumes/sdwu-models
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node4
          - node5

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/rewrite-target: /
  name: "{{ .Release.Name }}-ingress"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
      - ryougi.ca
  rules:
  - host: sdwu.kube.home.ryougi.ca
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Release.Name }}-service"
            port:
              number: 80
  - host: sdwu.kube.ryougi.ca
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Release.Name }}-service"
            port:
              number: 80
  - host: sdwu.home.ryougi.ca
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Release.Name }}-service"
            port:
              number: 80
  - host: sdwu.ryougi.ca
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: "{{ .Release.Name }}-service"
            port:
              number: 80
              
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: "{{ .Release.Name }}-config"
data: 
  config.json: |
    {
      "samples_save": true,
      "samples_format": "png",
      "samples_filename_pattern": "",
      "save_images_add_number": true,
      "grid_save": true,
      "grid_format": "png",
      "grid_extended_filename": false,
      "grid_only_if_multiple": true,
      "grid_prevent_empty_spots": false,
      "n_rows": -1,
      "enable_pnginfo": true,
      "save_txt": false,
      "save_images_before_face_restoration": false,
      "save_images_before_highres_fix": false,
      "save_images_before_color_correction": false,
      "jpeg_quality": 80,
      "webp_lossless": false,
      "export_for_4chan": true,
      "img_downscale_threshold": 4.0,
      "target_side_length": 4000,
      "img_max_size_mp": 200,
      "use_original_name_batch": true,
      "use_upscaler_name_as_suffix": false,
      "save_selected_only": true,
      "do_not_add_watermark": false,
      "temp_dir": "",
      "clean_temp_dir_at_start": false
    }